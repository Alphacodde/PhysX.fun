// src/components/SearchOverlay.tsx

'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { Search, X } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter } from 'next/navigation'; // Import useRouter from next/navigation

interface SearchOverlayProps {
  onClose: () => void;
}

// Option B: Define as a const and then default export
const SearchOverlay = ({ onClose }: SearchOverlayProps) => {
  const [searchQuery, setSearchQuery] = useState('');
  const router = useRouter(); // Initialize useRouter
  const inputRef = useRef<HTMLInputElement>(null); // Ref for autoFocus

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  // Function to handle the actual search and close the overlay
  const triggerSearch = useCallback(() => {
    if (searchQuery.trim()) {
      router.push(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
      onClose(); // Close the overlay immediately after initiating navigation
      setSearchQuery(''); // Clear the input field for next time
    }
  }, [searchQuery, router, onClose]);

  // Handle keyboard events: Enter to search, Escape to close
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      } else if (event.key === 'Enter') {
        // Prevent default form submission behavior if input is inside a form
        event.preventDefault();
        triggerSearch();
      }
    };

    document.addEventListener('keydown', handleKeyDown);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [triggerSearch, onClose]); // Dependencies: triggerSearch and onClose

  // Auto-focus the input when the component mounts/overlay becomes active
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []); // Empty dependency array means this runs once on mount

  // Prevent body scrolling when overlay is active
  useEffect(() => {
    document.body.style.overflow = 'hidden';
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, []);


  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 z-50 bg-black/90 backdrop-blur-xl flex items-center justify-center p-4"
        onClick={onClose} // Close when clicked outside
      >
        <motion.div
          initial={{ scale: 0.8, opacity: 0, y: 50 }}
          animate={{ scale: 1, opacity: 1, y: 0 }}
          exit={{ scale: 0.8, opacity: 0, y: 50 }}
          transition={{ type: 'spring', damping: 20 }}
          onClick={(e) => e.stopPropagation()} // Prevent overlay from closing when clicking inside
          className="w-full max-w-2xl relative"
        >
          <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-purple-500/10 to-pink-500/10 rounded-3xl blur-xl" />
          <div className="relative bg-gray-900/90 backdrop-blur-xl rounded-3xl border border-gray-700/50 p-8 shadow-2xl">
            <div className="flex items-center gap-4 mb-6">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}
                className="p-3 rounded-2xl bg-gradient-to-r from-cyan-500/20 to-purple-500/20"
              >
                <Search className="text-cyan-400" size={24} />
              </motion.div>
              <input
                ref={inputRef} // Attach ref for autoFocus
                type="text"
                value={searchQuery}
                onChange={handleSearchChange}
                placeholder="Search quantum physics, mathematics, equations..."
                className="flex-1 bg-transparent text-white text-xl placeholder-gray-400 outline-none"
                // autoFocus // Removed this here as we're using a ref in useEffect
              />
              <motion.button
                onClick={onClose} // Close when cross button is clicked
                whileHover={{ scale: 1.1, rotate: 90 }}
                whileTap={{ scale: 0.9 }}
                className="p-2 rounded-xl text-gray-400 hover:text-white hover:bg-gray-800/50 transition-all duration-300"
                aria-label="Close search"
              >
                <X size={24} />
              </motion.button>
            </div>
            <div className="flex items-center gap-2 text-sm text-gray-400">
              <span>Press</span>
              <kbd className="px-2 py-1 bg-gray-800 rounded text-cyan-400 font-mono">
                Enter
              </kbd>
              <span>to search or</span>
              <kbd className="px-2 py-1 bg-gray-800 rounded text-cyan-400 font-mono">
                Esc
              </kbd>
              <span>to close</span>
            </div>
            <div className="mt-6">
              {/* Change Link to a button that triggers the search and close */}
              <button
                onClick={triggerSearch}
                className="w-full py-2 px-4 rounded-xl bg-cyan-500 text-white hover:bg-cyan-600 transition-all"
                disabled={!searchQuery.trim()} // Disable if search query is empty
              >
                Search Results
              </button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
};

// Export the constant as the default export
export default SearchOverlay;